#include <kernel.h>
#include "kernel_cfg.h"
#include "app.h"
#include "mbed.h"
#include "app_config.h"
#include "Zumo.h"

int calc_avg(int);
void resetPID();
float pid_sample(float, float, float, float, float);
float math_limit(float, float, float);
void distLineTrace(int, float, float, float);

Serial pc(USBTX, USBRX);
Zumo zumo;
DigitalIn sw1(D12);

unsigned int IR_values[6];
int size = 10;
float diff[2] = {0, 0};
float DELTA_T = 0.001;
float integral = 0;

void task_main(intptr_t exinf) {
//    unsigned int IR_values[6];
	int n;
	sw1.mode(PullUp);

	pc.baud(115200);

	int avg_value = 1000;
	int ring_value[size] = {-1, -1, -1, -1, -1, -1};
	int cnt = 0;
	int border = 400;

    while(1){
    	n = sw1;
		if(n == 0){
			zumo.driveTank(0, 0);
			pc.printf("end\r\n");
			return;
		}

		//line trace
		distLineTrace(border, 0.5, 0.1, 0);
    }
}


int calc_avg(int value[]){
	int total = 0;

	for(int i=0;i<size;i++){
		total += value[i];
	}

	return total/size;
}

void resetPID(){
	diff[0] = 0;
	diff[1] = 0;
	integral = 0;
}

float pid_sample(float sensor_val, float target_val, float KP, float KI, float KD){
	float p, i, d;

	diff[0] = diff[1];
	diff[1] = sensor_val - target_val;
	integral += (diff[1] + diff[0]) / 2.0 * DELTA_T;

	p = KP * diff[1];
	i = KI * integral;
	d = KD * (diff[1] - diff[0]) / DELTA_T;

	return math_limit(p + i + d, -50, 50);
}

float math_limit(float val, float min, float max){
	if(val < min){
		return min;
	} else if (val > max) {
		return max;
	}
	return val;
}

void distLineTrace(int border, float Kp,float Ki,float Kd){
	int left_speed = 0;
	int right_speed = 0;
	zumo.readAnalogIrValue(IR_values);

	int pid_value = (int)pid_sample(IR_values[3], border, Kp,Ki,Kd);

	left_speed = 50 - pid_value;
	right_speed = 50 + pid_value;

	pc.printf("IR_value: %d, L_sp: %d, R_sp: %d \r\n", IR_values[3], left_speed, right_speed);

	zumo.driveTank(left_speed, right_speed);

	dly_tsk(100);	//Delay.msDelay(1000);
}
