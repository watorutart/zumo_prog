const static bool RIGHT = true;
const static bool LEFT = false;

//modeはどちら側の端をライントレースするのかを表す
void linetrace(int mode, unsigned int IR_values[6], int border, float Kp,float Ki,float Kd){
	int left_speed = 0;
	int right_speed = 0;

	int pid_value = (int)pid_sample(IR_values[3], border, Kp,Ki,Kd);

	//右端をライントレースする場合
	if(mode == RIGHT){
		left_speed = 70 + pid_value;
		right_speed = 70 - pid_value;
	}
	// 左端をライントレースする場合
	if(mode == LEFT){
		left_speed = 70 - pid_value;
		right_speed = 70 + pid_value;
	}

	pc.printf("IR_value: %d, L_sp: %d, R_sp: %d \r\n", IR_values[3], left_speed, right_speed);

	zumo.driveTank(left_speed, right_speed);

	dly_tsk(100);	//Delay.msDelay(1000);
}

---

void ltEscGrayload(bool mode){
	int ir_num;

	resetPID();

	if(mode == RIGHT){
		ir_num = 5;
	} else {
		ir_num = 0;
	}

	do{
		//道の色を検出
		getIRvalue();
		//道の色が黒ならループを抜ける
		if(IR_values[ir_num] >= BLACK){
			break;
		}
		linetrace(mode, IR_values, GW_border, kp, ki, kd);
	} while(IR_values[ir_num] >= GRAY);//道の色が灰色ならループ

	zumo.driveTank(0, 0);
}

void ltEscCross(int mode){
	int ir_num;
	if(mode == RIGHT){
		ir_num = 0;
	} else {
		ir_num = 5;
	}

	zumo.driveTank(70, 70);
	do{
		getIRvalue();
	} while(IRvalue[ir_num] >= BLACK);
	
	zumo.driveTank(0, 0);
}

void ltToCross(int mode){
	int cross_check;
	int use_IRnum;
	
	if(mode == RIGHT){
		use_IRnum = 0;
	} else {
		use_IRnum = 5;
	}

	//初期化
	cross_check = 0;
	resetPID();

	//ライントレースする
	while(1) {
		//道の色を検出
		getIRvalue();

		//線の交差を検知したら
		if(IR_values[use_IRnum] >= BLACK){
			cross_check++;
			if(cross_check >= 3){
				break;
			}
		} else {
			cross_check = 0;
		}
		linetrace(mode, IR_values, BW_border, kp, ki, kd);
	}

	//停止する
	zumo.driveTank(0, 0);
}

void ltToXCross(int mode, int x){
	int i = 0;
	int cross_count = 0;
	int use_IRnum;

	if(mode == RIGHT){
		use_IRnum = 0;
	} else {
		use_IRnum = 5;
	}
	
	resetPID();

	//ライントレースする
	while(i <= x) {
		//道の色を検出
		getIRvalue();

		//線の交差を検知したら
		if(IR_values[use_IRnum] >= BLACK){
			cross_count++;
			if(cross_count >= 3){
				i++;
			}
			else {
				cross_count=0;
			}
		}
		linetrace(mode, IR_values, BW_border, kp, ki, kd);
	}

	//停止する
	zumo.driveTank(0, 0);
}

void ltToGrayload(int mode){
	int gray_count;

	if(mode == RIGHT){
		use_IRnum = 5;
	} else {
		use_IRnum = 0;
	}

	//初期化
	gray_count = 0;
	resetPID();

	//ライントレースする
	while(1) {
		//道の色を検出する
		getIRvalue();
		//ライントレースする
		linetrace(IR_values, BW_border, kp, ki, kd);
		//灰色の道ならgray_check++
		if(IR_values[use_IRnum] >= GRAY && IR_values[use_IRnum] < BLACK){
			gray_count++;
			if(gray_count > 3){
				break;
			}
		} else {
			gray_count = 0;
		}
	}

	zumo.driveTank(0, 0);
}

void ltToXGrayload(int mode, int x){
	int i = 0;
	int gray_count;
	int use_IRnum;
	
	if(mode == RIGHT){
		use_IRnum = 5;
	} else {
		use_IRnum = 0;
	}

	//初期化
	gray_count = 0;
	resetPID();

	//ライントレースする
	while(i <= x) {
		//道の色を検出する
		getIRvalue();
		//ライントレースする
		linetrace(mode, IR_values, BW_border, kp, ki, kd);
		//灰色の道ならgray_check++
		if(IR_values[use_IRnum] >= GRAY && IR_values[use_IRnum] < BLACK){
			gray_count++;
			if(gray_count > 3){
				i++;
			        gray_count = 0;
			}
		} else {
			gray_count = 0;
		}
	}

	zumo.driveTank(0, 0);
}
